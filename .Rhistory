install.packages("parallel")
?makeCluster
compileAttributes("../bayesWatch")
library(Rcpp)
compileAttributes("../bayesWatch")
?makeCluster
?parLapply
x
print.bayesWatch = function( x, ... )
{
cat("bayesWatch object\n")
cat("-----------------\n")
print(x$changepoint_probabilities)
}
methods("plot")
setwd("~/Documents/GitHub")
library(bayesWatch)
full_data = readRDS("bayesWatch/data/example_data.rds")
day_of_observations = readRDS("bayesWatch/data/day_of_observations.rds")
day_dts = readRDS("bayesWatch/data/day_dts.rds")
x = fit_regime_vector(full_data, day_of_observations, day_dts, iterations = 100)
library(bayesWatch)
full_data = readRDS("bayesWatch/data/example_data.rds")
day_of_observations = readRDS("bayesWatch/data/day_of_observations.rds")
day_dts = readRDS("bayesWatch/data/day_dts.rds")
x = fit_regime_vector(full_data, day_of_observations, day_dts, iterations = 100)
setwd("~/Documents/GitHub/bayesWatch")
setwd("~/Documents/GitHub")
library(bayesWatch)
full_data = readRDS("bayesWatch/data/example_data.rds")
day_of_observations = readRDS("bayesWatch/data/day_of_observations.rds")
day_dts = readRDS("bayesWatch/data/day_dts.rds")
x = fit_regime_vector(full_data, day_of_observations, day_dts, iterations = 100)
print(x)
plot(x)
plot(x, prob_cutoff = 0.5)
library(ggplot2)
plot(x, prob_cutoff = 0.5)
setwd("~/Documents/GitHub/bayesWatch")
library(bayesWatch)
full_data = readRDS("bayesWatch/data/example_data.rds")
setwd("~/Documents/GitHub")
full_data = readRDS("bayesWatch/data/example_data.rds")
day_of_observations = readRDS("bayesWatch/data/day_of_observations.rds")
day_dts = readRDS("bayesWatch/data/day_dts.rds")
x = fit_regime_vector(full_data, day_of_observations, day_dts, iterations = 100)
print(x)
plot(x)
setwd("~/Documents/GitHub")
library(bayesWatch)
full_data = readRDS("bayesWatch/data/example_data.rds")
day_of_observations = readRDS("bayesWatch/data/day_of_observations.rds")
day_dts = readRDS("bayesWatch/data/day_dts.rds")
x = fit_regime_vector(full_data, day_of_observations, day_dts, iterations = 100)
print(x)
plot(x)
setwd("~/Documents/GitHub")
library(bayesWatch)
full_data = readRDS("bayesWatch/data/example_data.rds")
day_of_observations = readRDS("bayesWatch/data/day_of_observations.rds")
day_dts = readRDS("bayesWatch/data/day_dts.rds")
x = fit_regime_vector(full_data, day_of_observations, day_dts, iterations = 100)
print(x)
plot(x)
#' Title
#'
#' @param regime_fit_output
#' @param prob_cutoff
#'
#' @return
#' @export
#' @noRd
#'
#' @examples
plot.bayesWatch = function(regime_fit_object, prob_cutoff = 0.5) {
### Grab the change-point probabilities
yy = regime_fit_object
MVN_model_mergesplit_accepts = yy$mergesplit_accepts
my_states = yy$states
states_df = data.frame(matrix(my_states[[1]], nrow = 1))
for (i in 2:length(my_states)) {
states_df = rbind(states_df, data.frame(matrix(my_states[[i]], nrow = 1)))
}
states_df_burnt = states_df[floor(2 * nrow(states_df) / 4):nrow(states_df), ]
prop_mat = matrix(0, nrow = 1, ncol = (ncol(states_df_burnt) - 1))
number_of_segments = nrow(states_df)
for (j in 1:(ncol(states_df_burnt) - 1)) {
temp_difference = states_df_burnt[, j + 1] - states_df_burnt[, j]
prop_mat[1, j] = mean(temp_difference == 1)
}
changepoint_probs   = prop_mat
changepoints        = changepoint_probs >= prob_cutoff
changepoints_data   = data.frame(prob_value = changepoints,
time_point = 1:length(changepoints))
my_plot = ggplot2::ggplot(changepoints_data, aes(x = time_point, y = prob_value)) + ggplot2::geom_bar(stat = "identity") +
ggplot2::geom_hline(yintercept = prob_cutoff, color = "red") +
ggplot2::annotate("text", label = "Probability Cutoff Value")
return(my_plot)
}
plot.bayesWatch(x)
plot(x)
#' Title
#'
#' @param regime_fit_output
#' @param prob_cutoff
#'
#' @return
#' @export
#' @noRd
#'
#' @examples
plot.bayesWatch = function(regime_fit_object, prob_cutoff = 0.5) {
### Grab the change-point probabilities
yy = regime_fit_object
MVN_model_mergesplit_accepts = yy$mergesplit_accepts
my_states = yy$states
states_df = data.frame(matrix(my_states[[1]], nrow = 1))
for (i in 2:length(my_states)) {
states_df = rbind(states_df, data.frame(matrix(my_states[[i]], nrow = 1)))
}
states_df_burnt = states_df[floor(2 * nrow(states_df) / 4):nrow(states_df), ]
prop_mat = matrix(0, nrow = 1, ncol = (ncol(states_df_burnt) - 1))
number_of_segments = nrow(states_df)
for (j in 1:(ncol(states_df_burnt) - 1)) {
temp_difference = states_df_burnt[, j + 1] - states_df_burnt[, j]
prop_mat[1, j] = mean(temp_difference == 1)
}
changepoint_probs   = prop_mat
changepoints        = changepoint_probs >= prob_cutoff
changepoints_data   = data.frame(prob_value = changepoints,
time_point = 1:length(changepoints))
my_plot = ggplot2::ggplot(changepoints_data, aes(x = time_point, y = prob_value)) + ggplot2::geom_bar(stat = "identity") +
ggplot2::geom_hline(yintercept = prob_cutoff, color = "red") +
ggplot2::annotate("text", label = "Probability Cutoff Value")
return(my_plot)
}
plot(x)
#' Title
#'
#' @param regime_fit_output
#' @param prob_cutoff
#'
#' @return
#' @export
#' @noRd
#'
#' @examples
plot.bayesWatch = function(regime_fit_object, prob_cutoff = 0.5) {
### Grab the change-point probabilities
yy = regime_fit_object
MVN_model_mergesplit_accepts = yy$mergesplit_accepts
my_states = yy$states
states_df = data.frame(matrix(my_states[[1]], nrow = 1))
for (i in 2:length(my_states)) {
states_df = rbind(states_df, data.frame(matrix(my_states[[i]], nrow = 1)))
}
states_df_burnt = states_df[floor(2 * nrow(states_df) / 4):nrow(states_df), ]
prop_mat = matrix(0, nrow = 1, ncol = (ncol(states_df_burnt) - 1))
number_of_segments = nrow(states_df)
for (j in 1:(ncol(states_df_burnt) - 1)) {
temp_difference = states_df_burnt[, j + 1] - states_df_burnt[, j]
prop_mat[1, j] = mean(temp_difference == 1)
}
changepoint_probs   = prop_mat
changepoints        = changepoint_probs >= prob_cutoff
changepoints_data   = data.frame(prob_value = changepoints,
time_point = 1:length(changepoints))
browser()
my_plot = ggplot2::ggplot(changepoints_data, aes(x = time_point, y = prob_value)) + ggplot2::geom_bar(stat = "identity") +
ggplot2::geom_hline(yintercept = prob_cutoff, color = "red") +
ggplot2::annotate("text", label = "Probability Cutoff Value")
return(my_plot)
}
plot(x)
library(ggplot2)
my_plot = ggplot2::ggplot(changepoints_data, aes(x = time_point, y = prob_value)) + ggplot2::geom_bar(stat = "identity") +
ggplot2::geom_hline(yintercept = prob_cutoff, color = "red") +
ggplot2::annotate("text", label = "Probability Cutoff Value")
my_plot
changepoints_data
changepoints
changepoint_probs
data.frame(prob_value = changepoint_probs,
time_point = 1:length(changepoints))
time_point
prob_value
setwd("~/Documents/GitHub")
library(bayesWatch)
full_data = readRDS("bayesWatch/data/example_data.rds")
day_of_observations = readRDS("bayesWatch/data/day_of_observations.rds")
day_dts = readRDS("bayesWatch/data/day_dts.rds")
x = fit_regime_vector(full_data, day_of_observations, day_dts, iterations = 100)
plot(x)
print(x)
setwd("~/Documents/GitHub")
library(bayesWatch)
full_data = readRDS("bayesWatch/data/example_data.rds")
day_of_observations = readRDS("bayesWatch/data/day_of_observations.rds")
day_dts = readRDS("bayesWatch/data/day_dts.rds")
x = fit_regime_vector(full_data, day_of_observations, day_dts, iterations = 100)
print(x)
plot(x)
x$changepoint_probabilities
x$changepoint_probabilities[1,2] = 0.6
plot(x)
print(x)
plot(x)
x
x$changepoint_probabilities
